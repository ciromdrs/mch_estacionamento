/* Estacionamento_i
 * Author: Saul
 * Creation date: 23/10/2016
 */

IMPLEMENTATION Estacionamento_i
REFINES Estacionamento_r1

SEES TiposComuns

VALUES
    VAGAS = 1..MAX_INT

CONCRETE_VARIABLES
    cv,
    tipoR,
    statusR
    
INVARIANT
    tipoR   : VAGAS --> TIPOS &
    statusR : VAGAS --> STATUS

INITIALISATION
    cv  := 0;
    tipoR   := VAGAS * {comum};
    statusR := VAGAS * {livre}


OPERATIONS
    criar(tt) =
        BEGIN
            cv := cv + 1;
            tipoR(cv)   := tt;
            statusR(cv) := livre
        END;
    
    excluir(vv) =
        BEGIN // exclui substituindo pelo último
            tipoR(vv)   := tipoR(cv);
            statusR(vv) := statusR(cv);
            
            tipoR(cv)   := T_NULL;
            statusR(cv) := S_NULL;
            
            cv := cv-1
        END;
        
    cc <-- get_cor_lampada(vv) =
        BEGIN
            cc := vermelha;
            IF status(vv) = livre THEN
                CASE tipo(vv) OF EITHER idoso THEN
                    cc := azul
                OR deficiente THEN
                    cc := amarela
                OR comum THEN
                    cc := verde
                END
                END
            END
        END;
   
    tt <-- get_tipo_vaga(vv) = tt := tipo(vv);
    
    /* qc: Quantidade de VAGAS Comuns
       oc: quantidade de VAGAS Ocupadas Comuns
       as demais sÃ£o anÃ¡logas para deficientes e idosos.
    */
    qc, oc, qi, oi, qd, od <-- get_info_painel = 
        BEGIN
            qc := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = comum     | 1);
            oc := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = comum &
                              zz : dom(status) & status(zz) = ocupada | 1);
                          
            qi := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = idoso     | 1);
            oi := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = idoso &
                              zz : dom(status) & status(zz) = ocupada | 1);
                          
            qd := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = deficiente | 1);
            od := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = deficiente &
                              zz : dom(status) & status(zz) = ocupada  | 1)
        END;
    
    vv <-- indicar(tt) = 
        VAR ii IN
            ii := 1;
            WHILE ii <= MAX_INT DO
            INVARIANT
            VARIANT
            END
                
                ANY uu
            WHERE uu : dom(dom(tipo |> {tt}) <| status |> {livre}) THEN
                vv := uu
            END
        END
END