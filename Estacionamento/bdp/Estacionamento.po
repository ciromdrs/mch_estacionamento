THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(15) & WellDefinedness_get_info_painel.3,(_f(59) => _f(62));
_f(1) & _f(2) & _f(3) & _f(15) & WellDefinedness_get_info_painel.2,(_f(59) => _f(61));
_f(1) & _f(2) & _f(3) & _f(15) & WellDefinedness_get_info_painel.1,(_f(59) => _f(60));
_f(1) & _f(2) & _f(3) & _f(15) & WellDefinedness_Precondition_ocupar_idoso.1,(_f(59) => _f(61));
_f(1) & _f(2) & _f(3) & _f(15) & WellDefinedness_Precondition_ocupar_deficiente.1,(_f(59) => _f(62));
_f(1) & _f(2) & _f(3) & _f(15) & WellDefinedness_Precondition_ocupar_comum.1,(_f(59) => _f(60));
_f(1) & _f(2) & _f(3) & WellDefinednessInvariant.3,(_f(58) & _f(57) & _f(56) & _f(55) & _f(54) & _f(53) & _f(52) & _f(51) & _f(59) => _f(62));
_f(1) & _f(2) & _f(3) & WellDefinednessInvariant.2,(_f(58) & _f(57) & _f(56) & _f(55) & _f(54) & _f(53) & _f(52) & _f(59) => _f(61));
_f(1) & _f(2) & _f(3) & WellDefinednessInvariant.1,(_f(58) & _f(57) & _f(56) & _f(55) & _f(54) & _f(53) & _f(59) => _f(60));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_deficiente.4,(_f(4) & _f(13) => _f(47));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_deficiente.3,(_f(4) & _f(21) => _f(46));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_deficiente.2,(_f(4) & _f(7) => _f(45));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_deficiente.1,(_f(4) & _f(25) => _f(44));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_idoso.4,(_f(4) & _f(11) => _f(43));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_idoso.3,(_f(4) & _f(19) => _f(42));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_idoso.2,(_f(4) & _f(7) => _f(41));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_idoso.1,(_f(4) & _f(5) => _f(40));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_comum.4,(_f(4) & _f(9) => _f(39));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_comum.3,(_f(4) & _f(21) => _f(38));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_comum.2,(_f(4) & _f(19) => _f(37));
_f(1) & _f(2) & _f(3) & _f(15) & _f(35) & liberar_comum.1,(_f(4) & _f(17) => _f(36));
_f(1) & _f(2) & _f(3) & _f(15) & _f(30) & ocupar_idoso.4,(_f(4) & _f(11) => _f(34));
_f(1) & _f(2) & _f(3) & _f(15) & _f(30) & ocupar_idoso.3,(_f(4) & _f(19) => _f(33));
_f(1) & _f(2) & _f(3) & _f(15) & _f(30) & ocupar_idoso.2,(_f(4) & _f(7) => _f(32));
_f(1) & _f(2) & _f(3) & _f(15) & _f(30) & ocupar_idoso.1,(_f(4) & _f(5) => _f(31));
_f(1) & _f(2) & _f(3) & _f(15) & _f(24) & ocupar_deficiente.4,(_f(4) & _f(13) => _f(29));
_f(1) & _f(2) & _f(3) & _f(15) & _f(24) & ocupar_deficiente.3,(_f(4) & _f(21) => _f(28));
_f(1) & _f(2) & _f(3) & _f(15) & _f(24) & ocupar_deficiente.2,(_f(4) & _f(7) => _f(27));
_f(1) & _f(2) & _f(3) & _f(15) & _f(24) & ocupar_deficiente.1,(_f(4) & _f(25) => _f(26));
_f(1) & _f(2) & _f(3) & _f(15) & _f(16) & ocupar_comum.4,(_f(4) & _f(9) => _f(23));
_f(1) & _f(2) & _f(3) & _f(15) & _f(16) & ocupar_comum.3,(_f(4) & _f(21) => _f(22));
_f(1) & _f(2) & _f(3) & _f(15) & _f(16) & ocupar_comum.2,(_f(4) & _f(19) => _f(20));
_f(1) & _f(2) & _f(3) & _f(15) & _f(16) & ocupar_comum.1,(_f(4) & _f(17) => _f(18));
_f(1) & _f(2) & _f(3) & Initialisation.5,(_f(4) & _f(13) => _f(14));
_f(1) & _f(2) & _f(3) & Initialisation.4,(_f(4) & _f(11) => _f(12));
_f(1) & _f(2) & _f(3) & Initialisation.3,(_f(4) & _f(9) => _f(10));
_f(1) & _f(2) & _f(3) & Initialisation.2,(_f(4) & _f(7) => _f(8));
_f(1) & _f(2) & _f(3) & Initialisation.1,(_f(4) & _f(5) => _f(6))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
((max_comuns) : (NAT)) & ((max_idosos) : (NAT)) & ((max_deficientes) : (NAT));
VAGA: FIN(INTEGER) & not(VAGA = {}) & ((1..4)*{COR}): FIN(NATURAL*{COR}) & not(((1..4)*{COR}) = {});
"Invariant is preserved";
"Check invariant IDOSOS : POW( VAGA)";
{} : POW( VAGA);
"Check invariant ((((IDOSOS) /\ (DEFICIENTES))) = ({}))";
(((({}) /\ ({}))) = ({}));
"Check invariant (card(COMUNS) <= max_comuns)";
(card({}) <= max_comuns);
"Check invariant (card(IDOSOS) <= max_idosos)";
(card({}) <= max_idosos);
"Check invariant (card(DEFICIENTES) <= max_deficientes)";
(card({}) <= max_deficientes);
IDOSOS : POW( VAGA) & DEFICIENTES : POW( VAGA) & COMUNS : POW( VAGA) & ((((IDOSOS) /\ (DEFICIENTES))) = ({})) & ((((IDOSOS) /\ (COMUNS))) = ({})) & ((((DEFICIENTES) /\ (COMUNS))) = ({})) & (card(COMUNS) <= max_comuns) & (card(IDOSOS) <= max_idosos) & (card(DEFICIENTES) <= max_deficientes);
(card(COMUNS) +1 <= max_comuns) & ((vv) : (VAGA)) & not(vv : COMUNS) & not(vv : IDOSOS) & not(vv : DEFICIENTES);
"Check invariant COMUNS : POW( VAGA)";
((COMUNS) \/ ({vv})) : POW( VAGA);
"Check invariant ((((IDOSOS) /\ (COMUNS))) = ({}))";
((((IDOSOS) /\ (((COMUNS) \/ ({vv}))))) = ({}));
"Check invariant ((((DEFICIENTES) /\ (COMUNS))) = ({}))";
((((DEFICIENTES) /\ (((COMUNS) \/ ({vv}))))) = ({}));
(card(((COMUNS) \/ ({vv}))) <= max_comuns);
(card(DEFICIENTES) +1 <= max_deficientes) & ((vv) : (VAGA)) & not(vv : COMUNS) & not(vv : IDOSOS) & not(vv : DEFICIENTES);
"Check invariant DEFICIENTES : POW( VAGA)";
((DEFICIENTES) \/ ({vv})) : POW( VAGA);
((((IDOSOS) /\ (((DEFICIENTES) \/ ({vv}))))) = ({}));
((((((DEFICIENTES) \/ ({vv}))) /\ (COMUNS))) = ({}));
(card(((DEFICIENTES) \/ ({vv}))) <= max_deficientes);
(card(IDOSOS) +1 <= max_idosos) & ((vv) : (VAGA)) & not(vv : COMUNS) & not(vv : IDOSOS) & not(vv : DEFICIENTES);
((IDOSOS) \/ ({vv})) : POW( VAGA);
((((((IDOSOS) \/ ({vv}))) /\ (DEFICIENTES))) = ({}));
((((((IDOSOS) \/ ({vv}))) /\ (COMUNS))) = ({}));
(card(((IDOSOS) \/ ({vv}))) <= max_idosos);
((vv) : (VAGA));
(COMUNS - {vv}) : POW( VAGA);
((((IDOSOS) /\ ((COMUNS - {vv})))) = ({}));
((((DEFICIENTES) /\ ((COMUNS - {vv})))) = ({}));
(card((COMUNS - {vv})) <= max_comuns);
(IDOSOS - {vv}) : POW( VAGA);
(((((IDOSOS - {vv})) /\ (DEFICIENTES))) = ({}));
(((((IDOSOS - {vv})) /\ (COMUNS))) = ({}));
(card((IDOSOS - {vv})) <= max_idosos);
(DEFICIENTES - {vv}) : POW( VAGA);
((((IDOSOS) /\ ((DEFICIENTES - {vv})))) = ({}));
(((((DEFICIENTES - {vv})) /\ (COMUNS))) = ({}));
(card((DEFICIENTES - {vv})) <= max_deficientes);
((max_idosos) : (NAT));
((max_comuns) : (NAT));
VAGA: FIN(INTEGER) & not(VAGA = {});
(card(IDOSOS) <= max_idosos);
(card(COMUNS) <= max_comuns);
((((DEFICIENTES) /\ (COMUNS))) = ({}));
((((IDOSOS) /\ (COMUNS))) = ({}));
((((IDOSOS) /\ (DEFICIENTES))) = ({}));
COMUNS : POW( VAGA);
DEFICIENTES : POW( VAGA);
IDOSOS : POW( VAGA);
"Well definedness";
((COMUNS) : (FIN(COMUNS)));
((IDOSOS) : (FIN(IDOSOS)));
((DEFICIENTES) : (FIN(DEFICIENTES)));
not(vv : IDOSOS);
not(vv : COMUNS);
(card(COMUNS) +1 <= max_comuns);
(card(DEFICIENTES) +1 <= max_deficientes);
(card(IDOSOS) +1 <= max_idosos)
END
&
THEORY EnumerateX IS
COR == {azul,amarelo,verde,vermelho}
END
