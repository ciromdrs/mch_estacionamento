/* EstacionamentoR
 */

REFINEMENT EstacionamentoR
REFINES Estacionamento

SEES TiposComuns

ABSTRACT_VARIABLES
    tipo ,
    status ,
    ativo

INVARIANT
    ativo : VAGA --> BOOL &

    dom ( ativo |> { TRUE } ) = dom ( tipo ) &
    dom ( ativo |> { TRUE } ) = dom ( status )

INITIALISATION
    tipo   := {} ;
    status := {} ;
    ativo  := VAGA * { FALSE }

OPERATIONS
    // Controle de vagas
    criar ( tt ) =
        BEGIN
            ANY vv WHERE
                vv : VAGA        &
                vv /: dom ( tipo ) &
                vv /: dom ( status ) &
                ativo ( vv ) = FALSE
            THEN
                ativo ( vv ) := TRUE ;
                tipo ( vv ) := tt ;
                status ( vv ) := livre
            END
        END ;

    excluir ( vv ) =
        BEGIN
            ativo ( vv ) := FALSE ;
            tipo   := { vv } <<| tipo ;
            status := { vv } <<| status
        END ;

    // Ocupação e liberação de vagas
    ocupar ( vv ) =
        BEGIN
            status ( vv ) := ocupada
        END ;

    liberar ( vv ) =
        BEGIN
            status ( vv ) := livre
        END ;

    // Consultas
    cc <-- get_cor_lampada ( vv ) =
        BEGIN
            IF status ( vv ) = livre THEN
                CASE tipo ( vv ) OF EITHER idoso THEN
                    cc := azul
                OR deficiente THEN
                    cc := amarela
                ELSE // comum
                    cc := verde
                END
                END
            ELSE // status(vv) = ocupada
                cc := vermelha
            END
        END ;

    tt <-- get_tipo_vaga ( vv ) =
        BEGIN
            tt := tipo ( vv )
        END ;

    /* qc: Quantidade de vagsa Comuns
       oc: quantidade de vagas Ocupadas Comuns
       as demais são análogas para deficientes e idosos.
    */
    qc , oc , qi , oi , qd , od <-- get_info_painel =
        BEGIN
            qc := SIGMA zz . ( zz : dom ( tipo ) & tipo ( zz ) = comum & ativo ( zz ) = TRUE | 1 ) ;
            oc := SIGMA zz . ( zz : dom ( tipo ) & tipo ( zz ) = comum & ativo ( zz ) = TRUE &
                              zz : dom ( status ) & status ( zz ) = ocupada | 1 ) ;

            qi := SIGMA zz . ( zz : dom ( tipo ) & tipo ( zz ) = idoso & ativo ( zz ) = TRUE | 1 ) ;
            oi := SIGMA zz . ( zz : dom ( tipo ) & tipo ( zz ) = idoso & ativo ( zz ) = TRUE &
                              zz : dom ( status ) & status ( zz ) = ocupada | 1 ) ;

            qd := SIGMA zz . ( zz : dom ( tipo ) & tipo ( zz ) = deficiente & ativo ( zz ) = TRUE | 1 ) ;
            od := SIGMA zz . ( zz : dom ( tipo ) & tipo ( zz ) = deficiente & ativo ( zz ) = TRUE &
                              zz : dom ( status ) & status ( zz ) = ocupada | 1 )
        END ;

    vv <-- indicar ( tt ) =
        ANY uu
        WHERE uu : dom ( dom ( tipo |> { tt } ) <| status |> { livre } )
        THEN
            vv := uu
        END
END
