/* EstacionamentoR1
 * Criação do conjunto de vagas ativas
 * Elminação do paralelismo
 */

REFINEMENT EstacionamentoR1
REFINES Estacionamento

ABSTRACT_VARIABLES
    pagos ,  // conjunto dos tickets pagos
    chegada , // relação de chegada dos veículos
    hora ,   // hora atual, medida em minutos
    preco ,  // preco por hora, em reais
    lim ,    // limite gratuito, em minutos
    status , // status da vaga
    tipo ,  // tipo da vaga
    vagas_ativas ,  // conjunto das vagas que foram criadas
    tickets_ativos  // conjunto dos tickets que foram pegos


INVARIANT
    tickets_ativos <: TICKET &

    vagas_ativas <: VAGA &
    vagas_ativas = dom ( tipo ) &
    vagas_ativas = dom ( status )


INITIALISATION
    status  := {} ;
    tipo    := {} ;
    chegada := {} ;
    pagos   := {} ;
    hora    := 0 ;
    preco   := 3 ;
    lim     := 15 ;
    vagas_ativas   := {} ;
    tickets_ativos := {}

OPERATIONS
    // Controle de vagas
    criar ( tt ) =
        BEGIN
            ANY vv WHERE
                vv : VAGA         &
                vv /: vagas_ativas
            THEN
                vagas_ativas := vagas_ativas \/ { vv } ;
                tipo ( vv ) := tt ;
                status ( vv ) := livre
            END
        END ;

    excluir ( vv ) =
        PRE vv : vagas_ativas
        THEN
            vagas_ativas := vagas_ativas - { vv } ;
            tipo   := { vv } <<| tipo ;
            status := { vv } <<| status
        END ;

    // Ocupação e liberação de vagas
    ocupar ( vv ) =
        PRE vv : vagas_ativas
        THEN
            status ( vv ) := ocupada
        END ;

    liberar ( vv ) =
        PRE vv : vagas_ativas
        THEN
            status ( vv ) := livre
        END ;

    // Consultas
    cc <-- get_cor_lampada ( vv ) =
        PRE vv : vagas_ativas
        THEN
            IF status ( vv ) = livre THEN
                CASE tipo ( vv ) OF EITHER idoso THEN
                    cc := azul
                OR deficiente THEN
                    cc := amarela
                ELSE // comum
                    cc := verde
                END
                END
            ELSE // status(vv) = ocupada
                cc := vermelha
            END
        END ;

    tt <-- get_tipo_vaga ( vv ) =
        PRE vv : vagas_ativas
        THEN
            tt := tipo ( vv )
        END ;

    /* qc: Quantidade de vagsa Comuns
       oc: quantidade de vagas Ocupadas Comuns
       as demais são análogas para deficientes e idosos.
    */
    /*qc, oc, qi, oi, qd, od <-- get_info_painel = 
        BEGIN
            qc := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = comum & (zz : vagas_ativas) | 1);
            oc := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = comum & (zz : vagas_ativas) &
                              zz : dom(status) & status(zz) = ocupada | 1);
                          
            qi := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = idoso & (zz : vagas_ativas) | 1);
            oi := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = idoso & (zz : vagas_ativas) &
                              zz : dom(status) & status(zz) = ocupada | 1);
                          
            qd := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = deficiente & (zz : vagas_ativas) | 1);
            od := SIGMA zz . (zz : dom(tipo)   & tipo(zz) = deficiente & (zz : vagas_ativas) &
                              zz : dom(status) & status(zz) = ocupada  | 1)
        END;*/

    vv <-- indicar ( tt ) =
        ANY uu
        WHERE uu : dom ( dom ( tipo |> { tt } ) <| status |> { livre } ) &
            uu : vagas_ativas
        THEN
            vv := uu
        END ;

    adiantar ( horas , minutos ) =
        PRE horas   : NAT &
            minutos : NAT &
            ( horas * 60 ) + minutos + hora < MAXINT THEN
                hora := ( horas * 60 ) + minutos + hora
        END ;

    tt <-- pegar_ticket =
        ANY uu
        WHERE uu : TICKET & uu /: dom ( chegada ) THEN
            tt := uu ; chegada ( uu ) := hora ; tickets_ativos := tickets_ativos \/ { uu }
        END ;

    troco <-- pagar_ticket ( ticket , dinheiro ) =
        PRE troco    : NAT    &
            dinheiro : NAT    &
            ticket   : TICKET &
            ticket   : dom ( chegada )
        THEN
            // Se estiver dentro do limite gratuito
            IF hora - chegada ( ticket ) <= lim THEN
                // Devolve o dinheiro e marca como pago
                troco := dinheiro ; pagos := pagos \/ { ticket }
            // Senão
            ELSE
                // Se o dinheiro dá pra pagar
                IF ( ( hora - chegada ( ticket ) / 60 ) + 1 ) * preco - dinheiro >= 0 THEN
                    // Marca como pago e devolve o troco
                    troco := ( ( hora - chegada ( ticket ) / 60 ) + 1 ) * preco - dinheiro ;
                    pagos := pagos \/ { ticket }
                // Senão
                ELSE
                    // Devolve o dinheiro
                    troco := dinheiro
                END
            END
        END ;

    abrir_cancela ( ticket ) =
        PRE ticket : TICKET & ticket : tickets_ativos THEN
            tickets_ativos := tickets_ativos - { ticket } ;
            chegada := { ticket } <<| chegada ;
            skip // Abre a cancela física
        END

END
