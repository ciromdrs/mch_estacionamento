/* EstacionamentoR2I
 * Author: Saul
 * Creation date: 29/10/2016
 */

IMPLEMENTATION EstacionamentoR2I
REFINES EstacionamentoR2

SEES TiposComuns

VALUES
    VAGA = 1..MAX_INT

CONCRETE_VARIABLES
    statusI, // status da vaga
    tipoI,   // tipo da vaga
    ativoI

INVARIANT
    statusI : 1..MAX_INT --> STATUS &
    tipoI   : 1..MAX_INT --> TIPOS  &
    ativoI  : 1..MAX_INT --> BOOL   &
    
    !ii . (ii : ativo & ativo = dom(status) & ativo = dom(tipo) => 
        ((statusI(ii) = status(ii)) 
        & (tipoI(ii) = tipo(ii))
        & (ativoI(ii) = TRUE)))

INITIALISATION
    VAR ii IN 
        ii := 0;
        WHILE ii < MAX_INT DO
            ii := ii + 1;
            ativoI(ii)  := FALSE; // É necessário iniciar com FALSE
            statusI(ii) := S_NULL;
            tipoI(ii)   := T_NULL
        INVARIANT
            // A única condição necessária é que ativoI seja inicializado com FALSE
            !jj . (jj : 1..ii => ativoI(jj) = FALSE)
        VARIANT
            MAX_INT - ii
        END 
    END
    
OPERATIONS
    // Controle de vagas
    criar(tt) =
        BEGIN
            VAR ii, aa IN 
                aa := TRUE;
                ii := 0;
                WHILE ii < MAX_INT DO
                    ii := ii + 1;
                    aa := ativoI(ii);
                    IF aa = FALSE THEN
                        ativoI(ii)  := TRUE;
                        statusI(ii) := livre;
                        tipoI(ii)   := tt
                    END
                INVARIANT
                    // A única condição necessária é que ativoI seja inicializado com FALSE
                    !jj . (jj : 1..ii => ativoI(jj) = FALSE)
                VARIANT
                    MAX_INT - ii
                END 
            END
        END;
        
    excluir(vv) = ativoI(vv) := FALSE;
        
    // Ocupação e liberação de vagas
    ocupar(vv) = statusI(vv) := ocupada;
        
    liberar(vv) = statusI(vv) := livre;
        
    // Consultas
    cc <-- get_cor_lampada(vv) =
        BEGIN
            VAR ss, tt IN
                ss := statusI(vv);
                tt := tipoI(vv);
                IF ss = livre THEN
                    CASE tt OF EITHER idoso THEN
                        cc := azul
                    OR deficiente THEN
                        cc := amarela
                    ELSE // comum
                        cc := verde
                    END
                    END
                ELSE // statusI(vv) = ocupada
                    cc := vermelha
                END
            END
        END;
    
    tt <-- get_tipo_vaga(vv) = tt := tipoI(vv);
    
    /* qc: Quantidade de vagsa Comuns
       oc: quantidade de vagas Ocupadas Comuns
       as demais são análogas para deficientes e idosos.
    */
    qc, oc, qi, oi, qd, od <-- get_info_painel = 
        BEGIN
            qc := 0;
            oc := 0;
            qi := 0;
            oi := 0;
            qd := 0;
            od := 0;
            VAR ii, aa, tt, ss IN
                ii := 0;
                aa := FALSE;
                tt := T_NULL;
                ss := S_NULL;
                WHILE ii < MAX_INT DO
                    ii := ii + 1;
                    aa := ativoI(ii);
                    tt := tipoI(ii);
                    ss := statusI(ii)
                    
                    INVARIANT
                        (qc = SIGMA zz . (zz : 1..ii & (tipoI(zz) = comum) & (ativoI(zz) = TRUE) | 1)) &
                        (oc = SIGMA zz . (zz : 1..ii & (tipoI(zz) = comum) & (ativoI(zz) = TRUE) &
                                          statusI(zz) = ocupada | 1)) &
                                      
                        (qi = SIGMA zz . (zz : 1..ii & (tipoI(zz) = idoso) & (ativoI(zz) = TRUE) | 1)) &
                        (oi = SIGMA zz . (zz : 1..ii & (tipoI(zz) = idoso) & (ativoI(zz) = TRUE) &
                                          statusI(zz) = ocupada | 1)) &
                                      
                        (qd = SIGMA zz . (zz : 1..ii & (tipoI(zz) = deficiente) & (ativoI(zz) = TRUE) | 1)) &
                        (od = SIGMA zz . (zz : 1..ii & (tipoI(zz) = deficiente) & (ativoI(zz) = TRUE) &
                                          statusI(zz) = ocupada | 1))
                    VARIANT MAX_INT - ii
                END
            END
        END;
    
    vv <-- indicar(tt) = 
        BEGIN
            vv := 0;
            VAR ii, aa, ss, uu, continuar IN 
                uu := T_NULL;
                ss := S_NULL;
                aa := TRUE;
                continuar := TRUE;
                ii := 0;
                WHILE ii < MAX_INT DO
                    ii := ii + 1;
                    aa := ativoI(ii);
                    ss := statusI(ii);
                    uu := tipoI(ii);
                    IF aa = TRUE & ss = livre & uu = tt THEN
                        continuar := FALSE
                    END
                INVARIANT
                    !jj . (jj : 1..ii => not(aa = TRUE & ss = livre & uu = tt))
                VARIANT
                    MAX_INT - ii
                END 
            END
        END    
END